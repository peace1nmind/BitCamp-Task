
<<< OOP의 이해 / Report 제출 >>>

1. OOP(Object Oriented Programming)

객체 지향 프로그래밍. 모든 데이터를 객체로 취급하여 프로그래밍하는 방법. 처리 요구를 받은 객체가 자기 자신의 안에 있는 내용을 가지고 처리하는 방식. 절차형 언어가 크고 복잡한 프로그램을 구축하기 아렵다는 문제점을 해결하기 위해 탄생. 클래스로 객체의 구조와 행동을 정의하여 객체를 생성하고 그 객체를 통해 데이터와 메서드를 가지게 되는 구조를 이루고 있다.
장점으로는 코드 재사용성, 좋은 유지보수, 유연성, 확장성이 있다.
단점으로는 하나의 구성으로 이루어진 것이 아닌 각각의 객체들의 상호작용으로 이루어져있기 때문에 처리속도가 상대적으로 느리다는 점, 객체들이 많아질수록 용량이 커진다는 점, 객체들을 제작하고 그것을 응용하여 설계하여야하기 때문에 복잡해질 수 있고 설계에 있어서 시간이 필요하며 잘못된 설계를 할시 성능의 저하의 발생 가능성이 있다.
객체 지향 프로그래밍의 특성으로 캡슐화, 상속, 추상화, 다양성이 있다.

2. Object(객체)

객체 지향 프로그래밍이나 설계에서 데이터와 그에 관련된 동장을 모두 포함한 개념.
프로그래머의 관점에서보면 객체는 클래스에서 생성된 변수, 인스턴스로 볼 수 있다. 프로그래밍에 있어서 속성과 기능을 가지는 프로그램 단위이다.
객체 상태를 나타내는 데이터와 행당 데이터를 처리하고 참조하는 동작을 의미하는 메서드를 모아놓은 데이터+메서드 형태의 소프트웨어 모듈이다. 이 객체간의 공통된 특징을 모아 데이터와 메서드의 틀을 정의 해 놓은 것이 클래스이다(?)

3. Class 

4. abstraction(추상화)

5. Generalization(일반화) / Inheritance(상속)

6.  Specialization(구체적)

7. Realization

8. Association

9. dependency

10, Polymorphism

11. Encapuslation / 절차은익 / 정보은익


==>  report 제출 condition  <==
==>제출 FileName : OOPreport.txt
==> 편집기 : editplus
==> font : 돋움체 , fontSize : 12 , 글꼴 : Reqular
==> 문서/영구적설정/파일/설정및 구문강조/자동줄바꿈/자동줄바꿈check
==> File/인쇄설정/ 위,아래,왼쪽,오른쪽 여백 모두 1.0cm
==> A4용지 단면 2장분량