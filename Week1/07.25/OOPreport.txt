# OPP의 이해 / Report (122줄까지)

1. OOP(Object Oriented Programming)

OOP는 Object - Oriented - Programming의 약자로 객체지향프로그래밍을 의미한다. 현실 세계를 프로그래밍하는 것과 비슷하며 현실 세계의 사물들을 객체라고 보고 그 객체로부터 개발하고자하는 응용프로그램에 필요한 특징들을 뽑아와 프로그래밍하는 것을 뜻한다. 객체지향 프로그래밍은 프로그래밍에서 필요한 데이터를 추상화시켜서 속성과 행위를 가진 객체로 만들고, 객체간의 상호 작용을 통해 코드의 로직을 구성한다.
객체지향프로그램의 특징은 구성부분 단위가 클래스이고 객체를 기준으로 코드를 나누어 구현한다는 것이다. 절차지향프로그램은 프로세스가 함수 단위로 진행되지만, 객체지향프로그램은 프로세스가 객체 단위로 진행된다.
객체지향프로그래밍의 장점은 코드의 재사용성이 높고 유지보수성이 좋으면 유연성과 확장성이 있다는 점이다. 클래스와 객체를 재사용하여 코드 중복을 줄일 수 있고  객체 단위로 코드가 나누워져 작성되기 때문에 유지보수에도 유용하다.
단점으로는 하나의 구성으로 이루어진 것이 아닌 각각의 객체들의 상호작용으로 이루어져있기 때문에 처리속도가 상대적으로 느리다. 또한 객체들이 많아질수록 용량이 커진다는 단점도 있다. 객체들을 제작하고 그것을 응용하여 설계하여야하기때문에 복잡해질 수 있고 설계에 있어서 시간이 필요하며 잘못된 설계를 할시 성능의 저하가 발생할 수 있다.

2. Object(객체)

현실세계에서 System화 하려는 모든 대상, 추상화의 대상이 된다.

3. Class

공통된 특성(속성), 행위, 관계, 의미를 갖는 객체들의 모임.
추상화하여 표현하려는 것, 추상화의 결과물이다. 클래스의 구성으로는 상태, 속성, 정보를 나타내는 Field와 행위를 나타내는 Method가 있다. 클래스의 종류로는 현실세계에서 System화 하고자하는 내용을 나타내는 Bean과 응용프로그램으로서 실행할 수 있게 해주는 Application이 있다.
System화 하고자 하는 객체들의 공통된 특성과 행위들의 모임이기때문에 하위의 구체적인 클래스가 가져야하는 공통된 특성과 행위들이 있고 그 특성과 행위들은 하위 클래스들이 공통적으로 가지고 있다.

4. abvstraction(추상화)

객체를 구분하는 핵심적인 특징을 분류, 집중, 추출하는 것으로 System에 의존적이다. 어떤 System을 만드려는지에 따라서 추상화가 결정된다.

5. Generalization(일반화) / Inheritance(상속)

일반화는 객체들을 추상화할 때 추상화의 수준을 높이는 것을 의미한다. 객체들간의 좀 더 공통되고 일반적인 특성, 행위를 모아서 점점 더 공통된 내용을 모으는 것을 의미한다.
상속은 일반화 시킨 클래스의 특성과 행위를 동일하게 하위 클래스에 전달하여 쓸 수 있게 하는 것을 의미한다. 상위 클래스는 하위클래스들의 공통된 특성과 행위를 가지고 있고 하위 클래스는 상위 클래스가 가진 특성과 행위들을 모두 갖고 있다.

6. Specialization(구체적)

구체화는 일반화의 반대로 공통된 특성과 행위를 모으기보다는 그것에 추가하여 그 클래스만의 개별적인 특성들이 생기는 것을 말한다.

7. Realization

추상화 된 것을 실질적으로 구현하는 것을 의미한다.
실체화는 인터페이스의 정의만 되어있는 메서들르 오버라이딩하여 실제 기능을 구현하는 것을 의미한다. 기존 클래스(상위 클래스 또는 부모 클래스)를 확장하여 새로운 클래스(하위 클래스 또는 자식 클래스)를 생성화는 과정이다. 하위 클래스는 상위 클래스의 모든 속성과 메서드를 상속 받아 코드의 재사용성과 유연성을 높일 수 있다. 상위 클래스에서는 좀 더 큰 틀에서 공통된 특성과 기능을 묶고 하위 클래스에서 좀 더 구체적인 개념을 정의한다. 인터페이스에서 클래스가 가져야할 변수, 메서드등의 구조를 설계하고 그것을 실체화하여 하위 클래스에서 좀 더 구체적인 변수값이나 메서드의 기능들을 정의한다. 이를 통해 특수화된 클래스들을 공통된 구조를 갖출 수 있게하며 그 클래스가 가져야할 최소한의 변수, 기능들을 정의 할 수 있다. 또한 이를 통해 코드의 중복성을 줄일 수 있다.

8. Association

연관관계는 객체지향프로그래밍에서 가장 기본적인 관계로, 하나의 객체가 다른 객체와 어떻게 상호작용하는지를 나타낸다. 이는 객체들 사이의 연결을 보여준다. 연관관계에 있어서 방향성은 양방향 연관과 단방향 연관이 있는데, 양방향 연관은 두 객체가 서로 참조 할 수 있는 관계이고 단반향 연관은 한 객체가 다른 객체를 참조하지만 반대는 성립하지 않는 관계를 뜻한다.

9. dependency

한 객체가 다른 객체의 기능을 일시적으로 사용하는 상황을 의미한다. 의존관계는 메서드의 매개변수나 지역 변수를 통해 나타나며, 의존관계는 단기적이며 일시적 관계이다. 한 객체가 다른 객체의 메서드를 호출하거나 데이터를 사용하는 동안에만 다른 객체에 의존한다.

10. Polymorphism

다형성은 객체가 상속을 통해 기능을 확장, 변경하여 여러 형태의 객체로 재구성되는 것을 의미하며 그 방법으로는 오버라이딩과 오버로딩이 있다. 오버라이딩은 상위 클래스의 메서드를 하위 클래스가 재정의하여 사용하는 것이고 오버로딩은 한 메서드에 여러가지 종류의 매개변수를 설정하여 매개변수의 종류에 따른 기능들을 확장시켜 메서드를 사용할 수 있다.

11. Encapsulation / 절차은닉 / 정보은닉

캡슐화는 객체의 속성과 행위를 하나로 묶고, 구현 코드를 위부에 감춰 은닉하는 것을 미한다. 정보은닉은 객체 내부에 데이터를 외부에 접근 할 수 있게하여 외부에서 데이터 변경이나 이용을 제한한다. java에서는 private 같은 접근 제어자를 통해 데이터 접근을 제어한다. 캡슐화와 정보은닉을 통해 데이터와 그 데이터를 제어하는 프로세스를 객체에 묶고 외부에서의 접근을 제한하여 데이터 변경에 대한 책임을 해당 객체에만 맡겨 변경에 유연한 코드작성을 돕는다. 절차은닉은 클래스의 세부 구현을 숨기고 단순화된 인터페이스를 제공하여 상호작용을 단순화하는 개념이다. 이를 통해 사용자가 클래스의 내부 구현에 의존하지 않고 명확하고 일관된 방식으로 기능을 사용할 수 있게한다.





